import telebot
from telebot import types
import openai
import requests
import base64
import os
import time
import logging
import sqlite3
from yookassa import Configuration, Payment
import uuid
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
YOOKASSA_SHOP_ID = os.getenv('YOOKASSA_SHOP_ID')
YOOKASSA_SECRET_KEY = os.getenv('YOOKASSA_SECRET_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
Configuration.configure(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã
TARIFF_PLANS = {
    "–ë–∞–∑–æ–≤—ã–π": {
        "price": 299,
        "generations": 50
    },
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π": {
        "price": 499,
        "generations": 100
    },
    "–ü—Ä–µ–º–∏—É–º": {
        "price": 990,
        "generations": 300
    }
}

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('user_profiles.db')
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                name TEXT,
                age INTEGER,
                height REAL,
                weight REAL,
                goal TEXT,
                daily_calories INTEGER,
                free_generations INTEGER DEFAULT 10,
                total_generations INTEGER DEFAULT 0
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                payment_id TEXT UNIQUE,
                amount REAL,
                plan TEXT,
                generations INTEGER,
                status TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS meals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                date TEXT,
                meal_type TEXT,
                calories INTEGER,
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        ''')
        
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise e
    finally:
        if 'conn' in locals():
            conn.close()

def ensure_user_exists(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –Ω–µ—Ç"""
    conn = sqlite3.connect('user_profiles.db')
    cursor = conn.cursor()
    try:
        cursor.execute('SELECT 1 FROM users WHERE user_id = ?', (user_id,))
        if not cursor.fetchone():
            cursor.execute('''
                INSERT INTO users (user_id, free_generations, total_generations)
                VALUES (?, 10, 0)
            ''', (user_id,))
            conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        conn.close()

def check_user_generations(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    ensure_user_exists(user_id)
    conn = sqlite3.connect('user_profiles.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute('SELECT free_generations, total_generations FROM users WHERE user_id = ?', 
                      (user_id,))
        result = cursor.fetchone()
        return result[0], result[1]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {e}")
        return 0, 0
    finally:
        conn.close()

def update_user_generations(user_id, is_free_generation=True):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
    conn = sqlite3.connect('user_profiles.db')
    cursor = conn.cursor()
    
    try:
        if is_free_generation:
            cursor.execute('''
                UPDATE users 
                SET free_generations = free_generations - 1,
                    total_generations = total_generations + 1
                WHERE user_id = ?
            ''', (user_id,))
        else:
            cursor.execute('''
                UPDATE users 
                SET total_generations = total_generations + 1
                WHERE user_id = ?
            ''', (user_id,))
        
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {e}")
    finally:
        conn.close()

def create_payment(user_id, plan_name):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa"""
    plan_name = plan_name.split(" (")[0]  # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ—Ç —Ü–µ–Ω—ã
    try:
        tariff = TARIFF_PLANS[plan_name]
        
        idempotence_key = str(uuid.uuid4())
        payment = Payment.create({
            "amount": {
                "value": str(tariff["price"]) + ".00",
                "currency": "RUB"
            },
            "payment_method_data": {
                "type": "bank_card"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/YourBotUsername?start=payment_success_{user_id}"
            },
            "description": f"–¢–∞—Ä–∏—Ñ: {plan_name} ({tariff['generations']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π)"
        }, idempotence_key)

        conn = sqlite3.connect('user_profiles.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO payments 
            (user_id, payment_id, amount, plan, generations, status) 
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, payment.id, tariff["price"], plan_name, tariff["generations"], 'pending'))
        conn.commit()
        conn.close()

        return payment.confirmation.confirmation_url
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return None

def encode_image(image_path):
    """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64"""
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')

def show_balance_menu(message):
    """–ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    free_gens, total_gens = check_user_generations(message.from_user.id)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ü–µ–Ω–∞–º–∏
    markup.add(
        types.KeyboardButton(f"–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω ({TARIFF_PLANS['–ë–∞–∑–æ–≤—ã–π']['price']} —Ä—É–±.)"),
        types.KeyboardButton(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–ª–∞–Ω ({TARIFF_PLANS['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π']['price']} —Ä—É–±.)"),
        types.KeyboardButton(f"–ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω ({TARIFF_PLANS['–ü—Ä–µ–º–∏—É–º']['price']} —Ä—É–±.)"),
        types.KeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    )
    
    text = (
        f"üî¢ –ë–∞–ª–∞–Ω—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:\n"
        f"- –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {free_gens}\n"
        f"- –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {total_gens}\n\n"
        "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n"
        f"1. –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω: {TARIFF_PLANS['–ë–∞–∑–æ–≤—ã–π']['price']} —Ä—É–±. "
        f"({TARIFF_PLANS['–ë–∞–∑–æ–≤—ã–π']['generations']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π)\n"
        f"2. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–ª–∞–Ω: {TARIFF_PLANS['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π']['price']} —Ä—É–±. "
        f"({TARIFF_PLANS['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π']['generations']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π)\n"
        f"3. –ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω: {TARIFF_PLANS['–ü—Ä–µ–º–∏—É–º']['price']} —Ä—É–±. "
        f"({TARIFF_PLANS['–ü—Ä–µ–º–∏—É–º']['generations']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:"
    )
    
    bot.send_message(message.chat.id, text, reply_markup=markup)

def main_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
        types.KeyboardButton("üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞"),
        types.KeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        types.KeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
    )
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    ensure_user_exists(message.from_user.id)
    text = ("–ü—Ä–∏–≤–µ—Ç! ü•ó –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é.\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–∞ –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–∏—Ç–∞–Ω–∏–µ–º.")
    bot.send_message(message.chat.id, text, reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == "üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞")
def start_meal_analysis(message):
    """–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –±–ª—é–¥–∞"""
    free_gens, _ = check_user_generations(message.from_user.id)
    
    if free_gens > 0:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        bot.send_message(
            message.chat.id,
            "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",
            reply_markup=main_menu()
        )

@bot.message_handler(func=lambda message: message.text == "üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞")
def start_meal_analysis(message):
    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
        reply_markup=types.ReplyKeyboardRemove()
    )

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        os.makedirs("temp", exist_ok=True)
        file_path = f"temp/{message.photo[-1].file_id}.jpg"
        with open(file_path, "wb") as file:
            file.write(downloaded_file)

        logger.info("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ.")

        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        base64_image = encode_image(file_path)

        # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        logger.info("–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º base64
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system", 
                    "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–ª—é–¥–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –æ–ø—Ä–µ–¥–µ–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –¥–∞–π nutritional advice."
                },
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "–î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –±–ª—é–¥–æ"},
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}}
                    ]
                }
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.send_message(
            message.chat.id,
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:\n{response.choices[0].message.content}",
            reply_markup=main_menu()
        )
    except Exception as e:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")

@bot.message_handler(func=lambda message: message.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
def handle_balance_replenish(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    show_balance_menu(message)

@bot.message_handler(func=lambda message: any(message.text.startswith(f"{plan} –ø–ª–∞–Ω") for plan in TARIFF_PLANS.keys()))
def handle_plan_selection(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    plan_name = message.text.split(" (")[0]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –±–µ–∑ —Ü–µ–Ω—ã
    payment_url = create_payment(message.from_user.id, plan_name)
    
    if payment_url:
        bot.send_message(
            message.chat.id,
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ '{plan_name}' –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{payment_url}",
            reply_markup=main_menu()
        )
    else:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu()
        )

@bot.message_handler(func=lambda message: message.text == "üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
def configure_profile(message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    ensure_user_exists(message.from_user.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("–í–æ–∑—Ä–∞—Å—Ç"),
        types.KeyboardButton("–†–æ—Å—Ç"),
        types.KeyboardButton("–í–µ—Å"),
        types.KeyboardButton("–¶–µ–ª—å"),
        types.KeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    )
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
def back_to_main_menu(message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    bot.send_message(
        message.chat.id,
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda message: message.text == "–ò–º—è")
def set_name(message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(msg, save_name)

def save_name(message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect('user_profiles.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO users (user_id, name, free_generations, total_generations) 
            VALUES (?, ?, 10, 0)
            ON CONFLICT(user_id) 
            DO UPDATE SET name = excluded.name
        ''', (message.from_user.id, message.text))
        conn.commit()
        bot.send_message(
            message.chat.id,
            f"–ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {message.text}",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏.")
    finally:
        conn.close()

@bot.message_handler(func=lambda message: message.text == "–í–æ–∑—Ä–∞—Å—Ç")
def set_age(message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    bot.register_next_step_handler(msg, save_age)

def save_age(message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        age = int(message.text)
        if age < 0 or age > 120:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç")
            
        conn = sqlite3.connect('user_profiles.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET age = ? WHERE user_id = ?', 
                      (age, message.from_user.id))
        conn.commit()
        bot.send_message(
            message.chat.id,
            f"–í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {age}",
            reply_markup=main_menu()
        )
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (0-120).")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞.")
    finally:
        if 'conn' in locals():
            conn.close()

@bot.message_handler(func=lambda message: message.text == "–†–æ—Å—Ç")
def set_height(message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    bot.register_next_step_handler(msg, save_height)

def save_height(message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        height = float(message.text)
        if height < 50 or height > 250:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç")
            
        conn = sqlite3.connect('user_profiles.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET height = ? WHERE user_id = ?', 
                      (height, message.from_user.id))
        conn.commit()
        bot.send_message(
            message.chat.id,
            f"–†–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {height} —Å–º",
            reply_markup=main_menu()
        )
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (50-250 —Å–º).")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ—Å—Ç–∞: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–æ—Å—Ç–∞.")
    finally:
        if 'conn' in locals():
            conn.close()

@bot.message_handler(func=lambda message: message.text == "–í–µ—Å")
def set_weight(message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    bot.register_next_step_handler(msg, save_weight)

def save_weight(message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        weight = float(message.text)
        if weight < 30 or weight > 300:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å")
            
        conn = sqlite3.connect('user_profiles.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET weight = ? WHERE user_id = ?', 
                      (weight, message.from_user.id))
        conn.commit()
        bot.send_message(
            message.chat.id,
            f"–í–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {weight} –∫–≥",
            reply_markup=main_menu()
        )
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥).")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Å–∞: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–µ—Å–∞.")
    finally:
        if 'conn' in locals():
            conn.close()

@bot.message_handler(func=lambda message: message.text == "–¶–µ–ª—å")
def set_goal(message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("–ü–æ—Ö—É–¥–µ–Ω–∏–µ"),
        types.KeyboardButton("–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"),
        types.KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞"),
        types.KeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    )
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:", reply_markup=markup)
    bot.register_next_step_handler(msg, save_goal)

def save_goal(message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                           reply_markup=main_menu())
            return
            
        goal = message.text
        if goal not in ["–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã", "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞"]:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–ª—å")
        
        conn = sqlite3.connect('user_profiles.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET goal = ? WHERE user_id = ?', 
                      (goal, message.from_user.id))
        conn.commit()
        bot.send_message(message.chat.id, f"–¶–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {goal}", 
                        reply_markup=main_menu())
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–∏: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏.")
    finally:
        if 'conn' in locals():
            conn.close()

@bot.message_handler(func=lambda message: message.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
def show_progress(message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('user_profiles.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (message.from_user.id,))
        user = cursor.fetchone()
        
        if not user:
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!", reply_markup=main_menu())
            return
        
        free_gens, total_gens = check_user_generations(message.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        cursor.execute('''
            SELECT meal_type, COUNT(*) as meal_count, SUM(calories) as total_calories 
            FROM meals 
            WHERE user_id = ? 
            GROUP BY meal_type
        ''', (message.from_user.id,))
        meal_stats = cursor.fetchall()
        
        progress_message = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"–ò–º—è: {user[1] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user[2] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–†–æ—Å—Ç: {user[3] or '–ù–µ —É–∫–∞–∑–∞–Ω'} —Å–º\n"
            f"–í–µ—Å: {user[4] or '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–≥\n"
            f"–¶–µ–ª—å: {user[5] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            f"üî¢ –ë–∞–ª–∞–Ω—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:\n"
            f"- –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {free_gens}\n"
            f"- –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {total_gens}\n\n"
        )
        
        if meal_stats:
            progress_message += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è:\n"
            for stat in meal_stats:
                progress_message += f"- {stat[0]}: {stat[1]} –ø—Ä–∏–µ–º–æ–≤, {stat[2]} –∫–∞–ª–æ—Ä–∏–π\n"
        else:
            progress_message += "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏.\n"
        
        bot.send_message(message.chat.id, progress_message, reply_markup=main_menu())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=main_menu()
        )
    finally:
        conn.close()

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.",
        reply_markup=main_menu()
    )

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    init_database()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            bot.polling(none_stop=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            time.sleep(5)
