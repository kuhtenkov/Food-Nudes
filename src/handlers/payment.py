import os
import logging
from datetime import datetime
from logging.handlers import RotatingFileHandler
from telebot import TeleBot, types
from database.db_manager import DatabaseManager
from utils.keyboards import main_menu

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
log_directory = 'logs'
if not os.path.exists(log_directory):
    os.makedirs(log_directory)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def setup_logging():
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    file_handler = RotatingFileHandler(
        filename=f'{log_directory}/payment_bot.log',
        maxBytes=10*1024*1024,  # 10MB
        backupCount=5,
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger('PaymentBot')
    logger.setLevel(logging.INFO)
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.handlers = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –ª–æ–≥–≥–µ—Ä—É
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logger = setup_logging()

# –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã
TARIFF_PLANS = {
    "–ë–∞–∑–æ–≤—ã–π": {
        "price": 299,
        "generations": 50
    },
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π": {
        "price": 499,
        "generations": 100
    },
    "–ü—Ä–µ–º–∏—É–º": {
        "price": 990,
        "generations": 300
    }
}

class PaymentHandler:
    def __init__(self, bot: TeleBot, db_manager: DatabaseManager):
        self.bot = bot
        self.db_manager = db_manager
        self.provider_token = os.getenv('PAYMENT_PROVIDER_TOKEN')
        if not self.provider_token:
            logger.error("PAYMENT_PROVIDER_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            raise ValueError("–¢–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        logger.info("PaymentHandler —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def show_tariff_plans(self, message):
        """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤"""
        logger.info(f"–ü–æ–∫–∞–∑ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        try:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            
            for plan_name, plan_info in TARIFF_PLANS.items():
                button_text = f"{plan_name} ({plan_info['price']} ‚ÇΩ)"
                markup.add(types.KeyboardButton(button_text))
            
            markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))

            free_gens, total_gens = self.db_manager.check_user_generations(message.from_user.id)
            
            text = (
                f"üî¢ –í–∞—à –±–∞–ª–∞–Ω—Å:\n"
                f"- –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {free_gens}\n"
                f"- –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {total_gens}\n\n"
                "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n"
            )
            
            for plan_name, plan_info in TARIFF_PLANS.items():
                text += (
                    f"‚Ä¢ {plan_name}:\n"
                    f"  - {plan_info['generations']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
                    f"  - {plan_info['price']} ‚ÇΩ\n"
                )

            self.bot.send_message(message.chat.id, text, reply_markup=markup)
            logger.info(f"–¢–∞—Ä–∏—Ñ—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {str(e)}", 
                        exc_info=True)
            self.bot.send_message(
                message.chat.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_menu()
            )

    def create_invoice(self, message, plan_name):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, –ø–ª–∞–Ω: {plan_name}")
        try:
            clean_plan_name = plan_name.split(" (")[0]
            if clean_plan_name not in TARIFF_PLANS:
                logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–ª–∞–Ω–æ–º: {clean_plan_name}")
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: {clean_plan_name}")
                
            plan = TARIFF_PLANS[clean_plan_name]
            
            prices = [
                types.LabeledPrice(
                    label=f'–¢–∞—Ä–∏—Ñ {clean_plan_name}', 
                    amount=plan["price"] * 100
                )
            ]
            
            invoice_data = {
                'chat_id': message.chat.id,
                'title': f"–¢–∞—Ä–∏—Ñ {clean_plan_name}",
                'description': f"–¢–∞—Ä–∏—Ñ {clean_plan_name} –Ω–∞ {plan['generations']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π",
                'invoice_payload': f"tariff_{clean_plan_name}",
                'provider_token': self.provider_token,
                'currency': "RUB",
                'prices': prices,
                'start_parameter': "payment"
            }
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {invoice_data}")
            self.bot.send_invoice(**invoice_data)
            logger.info(f"–ò–Ω–≤–æ–π—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {str(e)}", 
                        exc_info=True)
            self.bot.send_message(
                message.chat.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=main_menu()
            )

    def handle_plan_selection(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        try:
            plan_name = message.text.split(" (")[0]
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ: {plan_name}")
            self.create_invoice(message, plan_name)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞: {str(e)}", exc_info=True)
            self.bot.send_message(
                message.chat.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_menu()
            )

    def handle_pre_checkout(self, pre_checkout_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –¥–ª—è query_id: {pre_checkout_query.id}")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å payload
            payload = pre_checkout_query.invoice_payload
            plan_name = payload.split('_')[1]
            
            logger.info(f"Pre-checkout –¥–∞–Ω–Ω—ã–µ: plan_name={plan_name}, "
                       f"amount={pre_checkout_query.total_amount}, "
                       f"user_id={pre_checkout_query.from_user.id}")
            
            if plan_name not in TARIFF_PLANS:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –≤ pre-checkout: {plan_name}")
                self.bot.answer_pre_checkout_query(
                    pre_checkout_query.id,
                    ok=False,
                    error_message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω"
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
            expected_amount = TARIFF_PLANS[plan_name]["price"] * 100
            if pre_checkout_query.total_amount != expected_amount:
                logger.error(
                    f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º—ã: –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_amount}, "
                    f"–ø–æ–ª—É—á–µ–Ω–æ {pre_checkout_query.total_amount}"
                )
                self.bot.answer_pre_checkout_query(
                    pre_checkout_query.id,
                    ok=False,
                    error_message="–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞"
                )
                return

            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            logger.info(f"Pre-checkout —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω –¥–ª—è query_id: {pre_checkout_query.id}")
            self.bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ pre-checkout: {str(e)}", exc_info=True)
            self.bot.answer_pre_checkout_query(
                pre_checkout_query.id,
                ok=False,
                error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞"
            )

    def handle_successful_payment(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        try:
            payment = message.successful_payment
            plan_name = payment.invoice_payload.split('_')[1]
            plan = TARIFF_PLANS[plan_name]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            payment_info = {
                'user_id': message.from_user.id,
                'amount': payment.total_amount / 100,
                'currency': payment.currency,
                'provider_payment_charge_id': payment.provider_payment_charge_id,
                'telegram_payment_charge_id': payment.telegram_payment_charge_id,
                'plan_name': plan_name,
                'generations_added': plan['generations'],
                'payment_date': datetime.now()
            }
            
            logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {payment_info}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            self.db_manager.save_payment(payment_info)
            logger.info(f"–ü–ª–∞—Ç—ë–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            self.db_manager.add_generations(message.from_user.id, plan['generations'])
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
            
            success_message = (
                f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!\n\n"
                f"–¢–∞—Ä–∏—Ñ: {plan_name}\n"
                f"–ù–∞—á–∏—Å–ª–µ–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {plan['generations']}\n"
                f"–ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payment.provider_payment_charge_id}"
            )
            
            self.bot.send_message(
                message.chat.id,
                success_message,
                reply_markup=main_menu()
            )
            logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}", exc_info=True)
            self.bot.send_message(
                message.chat.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=main_menu()
            )

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π"""
        logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π")
        
        @self.bot.message_handler(func=lambda message: message.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
        def show_plans(message):
            self.show_tariff_plans(message)

        @self.bot.message_handler(func=lambda message: any(
            message.text.startswith(f"{plan} (") for plan in TARIFF_PLANS.keys()
        ))
        def process_plan_selection(message):
            plan_name = message.text.split(" (")[0]
            logger.info(f"–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: {plan_name}")
            self.handle_plan_selection(message)

        @self.bot.pre_checkout_query_handler(func=lambda query: True)
        def pre_checkout(pre_checkout_query):
            self.handle_pre_checkout(pre_checkout_query)

        @self.bot.message_handler(content_types=['successful_payment'])
        def successful_payment(message):
            self.handle_successful_payment(message)
            
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")