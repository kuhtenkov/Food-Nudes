import os
import logging
import random
from telebot import TeleBot, types
from openai import OpenAI
import base64
from utils.keyboards import main_menu

logger = logging.getLogger(__name__)

class MealAnalysisHandler:
    def __init__(self, bot: TeleBot, db_manager):
        self.bot = bot
        self.db_manager = db_manager
        self.current_rename_context = {}
        
        try:
            self.client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
            logger.info("OpenAI client successfully initialized")
        except Exception as e:
            logger.error(f"Failed to initialize OpenAI client: {e}")
            raise

        # –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        self.spicy_intros = [
            "–ù—É —á—Ç–æ, —Ä–∞–∑–¥–µ–≤–∞–µ–º —Ç–≤–æ—é —Ç–∞—Ä–µ–ª–∫—É?",
            "–í—Ä–µ–º—è –æ–±–Ω–∞–∂–∏—Ç—å –∫—É–ª–∏–Ω–∞—Ä–Ω—É—é –ø—Ä–∞–≤–¥—É!",
            "–ì–æ–ª–∞—è –ø—Ä–∞–≤–¥–∞ –æ —Ç–≤–æ–µ–π –µ–¥–µ incoming...",
            "–°–µ–π—á–∞—Å —É–∑–Ω–∞–µ–º, —á—Ç–æ –ø—Ä—è—á–µ—Ç—Å—è –ø–æ–¥ —Å–æ—É—Å–æ–º!",
            "–í–Ω–∏–º–∞–Ω–∏–µ, –±—É–¥–µ—Ç –≥–æ—Ä—è—á–æ... –∏ –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç –±–ª—é–¥–∞!"
        ]

        self.calorie_comments = [
            "–ö–∞–ª–æ—Ä–∏–∏ –Ω–µ –ø—Ä—è—á—É—Ç—Å—è, –¥–µ—Ç–∫–∞!",
            "–ß–µ—Å—Ç–Ω–æ? –≠—Ç–∞ –ø–æ—Ä—Ü–∏—è - —Ü–µ–ª—ã–π —Ä–æ–º–∞–Ω —Å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º–∏.",
            "–¢–≤–æ—è —Ç–∞—Ä–µ–ª–∫–∞ –≤—Ä—ë—Ç, —è –≤–∏–∂—É –Ω–∞—Å–∫–≤–æ–∑—å!",
            "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ, —É–≥–ª–µ–≤–æ–¥—ã —Ä–∞–∑–¥–µ–≤–∞—é—Ç—Å—è!",
            "–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å? –°—á–∏—Ç–∞–π, –∫–∞–∫ –∏–Ω—Ç–∏–º–Ω—ã–µ encounter'—ã!"
        ]

        self.follow_up_phrases = [
            "–ù—É —á—Ç–æ, –ø—Ä–æ–≥–æ–ª–æ–¥–∞–ª—Å—è? –Ø –≥–æ—Ç–æ–≤ —Ä–∞–∑–¥–µ—Ç—å —Ç–≤–æ—é —Å–ª–µ–¥—É—é—â—É—é —Ç–∞—Ä–µ–ª–∫—É! üòèüçΩÔ∏è",
            "–û–¥–∏–Ω –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∞–¥–∏, –Ω–æ –º–æ—è —Å—Ç—Ä–∞—Å—Ç—å –∫ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º —Ç–∞–π–Ω–∞–º –Ω–µ —É—Ç–æ–ª–µ–Ω–∞. –°–ª–µ–¥—É—é—â–µ–µ –±–ª—é–¥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üî•",
            "–ê–ø–ø–µ—Ç–∏—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–æ –≤—Ä–µ–º—è –µ–¥—ã... –∏ –≤–æ –≤—Ä–µ–º—è –º–æ–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ß—Ç–æ —Ç–∞–º —É —Ç–µ–±—è next? üòâ",
            "–≠—Ç–æ –±—ã–ª–æ –≥–æ—Ä—è—á–æ, –Ω–æ —è —Ç–æ–ª—å–∫–æ —Ä–∞–∑–æ–≥—Ä–µ–ª—Å—è! –¢–≤–æ—è —Å–ª–µ–¥—É—é—â–∞—è –ø–æ—Ä—Ü–∏—è –∂–¥—ë—Ç —Å–≤–æ–µ–≥–æ —Ä–∞–∑–æ–±–ª–∞—á–µ–Ω–∏—è. üå∂Ô∏è",
            "–û–¥–∏–Ω culinary striptease –æ–∫–æ–Ω—á–µ–Ω, –Ω–æ —à–æ—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è! –ö–∞–∫–æ–µ –±–ª—é–¥–æ —Ä–∞–∑–¥–µ—Ç–æ–µ –∂–¥—ë—Ç –º–µ–Ω—è? üëÄ"
        ]

    def generate_correction_keyboard(self, message_id, current_dish):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –±–ª—é–¥–∞"""
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("–í—Å—ë –≤–µ—Ä–Ω–æ ‚úÖ", callback_data=f"meal_correct:{message_id}"),
            types.InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ üçΩÔ∏è", callback_data=f"meal_rename:{message_id}:{current_dish}")
        )
        return markup

    def encode_image(self, image_path):
        """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64"""
        try:
            with open(image_path, "rb") as image_file:
                return base64.b64encode(image_file.read()).decode('utf-8')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            raise

    def handle_start_analysis(self, message):
        """–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –±–ª—é–¥–∞ —Å –Ω–æ–≤—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º"""
        try:
            free_gens, paid_gens = self.db_manager.check_user_generations(message.from_user.id)
            
            if free_gens + paid_gens <= 0:
                self.bot.send_message(
                    message.chat.id,
                    "‚ö†Ô∏è –£–ø—Å, —Ç–≤–æ–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–≤–∏–¥–∞–Ω–∏—è —Å –µ–¥–æ–π –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å, –∫—Ä–∞—Å–∞–≤—á–∏–∫! üí∏",
                    reply_markup=main_menu()
                )
                return

            self.bot.send_message(
                message.chat.id,
                "–ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å –≤—Å—é –ø—Ä–∞–≤–¥—É –æ —Å–≤–æ–µ–π —Ç–∞—Ä–µ–ª–∫–µ? –ü—Ä–∏—Å—ã–ª–∞–π —Ñ–æ—Ç–æ ‚Äì —è –Ω–µ –±–æ—é—Å—å –Ω–∏–∫–∞–∫–∏—Ö –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö —Ç–∞–π–Ω! üçΩÔ∏è",
                reply_markup=types.ReplyKeyboardRemove()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.bot.send_message(
                message.chat.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∏–Ω—Ç—Ä–∏–≥—É—é—â–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–æ–±–ª–∞–∑–Ω–∏—Ç—å –º–µ–Ω—è —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑ üòâ",
                reply_markup=main_menu()
            )

    def handle_photo(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏"""
        try:
            free_gens, paid_gens = self.db_manager.check_user_generations(message.from_user.id)
            
            if free_gens + paid_gens <= 0:
                self.bot.send_message(
                    message.chat.id,
                    "‚ö†Ô∏è –¢–≤–æ–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–≤–∏–¥–∞–Ω–∏—è —Å –µ–¥–æ–π –æ–∫–æ–Ω—á–µ–Ω—ã. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å, –∫—Ä–∞—Å–∞–≤—á–∏–∫! üí∏",
                    reply_markup=main_menu()
                )
                return

            processing_msg = self.bot.send_message(
                message.chat.id,
                "–†–∞–∑–¥–µ–≤–∞—é —Ç–≤–æ—é —Ç–∞—Ä–µ–ª–∫—É... –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ —Å—Ç—Ä–∞—Å—Ç—å—é –∫ –¥–µ—Ç–∞–ª—è–º! üîç"
            )

            file_info = self.bot.get_file(message.photo[-1].file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)

            os.makedirs("temp", exist_ok=True)
            file_path = f"temp/{message.photo[-1].file_id}.jpg"
            
            try:
                with open(file_path, "wb") as file:
                    file.write(downloaded_file)

                base64_image = self.encode_image(file_path)
            finally:
                if os.path.exists(file_path):
                    os.remove(file_path)

            # –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–ª—é–¥–∞
            dish_response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "system",
                        "content": "–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ. –ù–∞–∑–æ–≤–∏ –µ–≥–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."
                    },
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": "–ß—Ç–æ —ç—Ç–æ –∑–∞ –±–ª—é–¥–æ?"},
                            {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}}
                        ]
                    }
                ],
                max_tokens=20
            )

            detected_dish = dish_response.choices[0].message.content.strip()

            # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "system",
                        "content": f"{random.choice(self.spicy_intros)}\n\n"
                        "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é —Å –æ—Å—Ç—Ä—ã–º —è–∑—ã–∫–æ–º –≤ —Å—Ç–∏–ª–µ FoodNudes. "
                        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ—Å—Ç–Ω—ã–π –∏ –¥–µ—Ä–∑–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞:\n\n"
                        "üî• –ü—Ä–∞–≤–∏–ª–∞:\n"
                        "1. –û–ø—Ä–µ–¥–µ–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º\n"
                        "2. –£–∫–∞–∂–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Å prov–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–º –Ω–∞–º—ë–∫–æ–º\n"
                        "3. –û—Ü–µ–Ω–∏ –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å —Å –ª–µ–≥–∫–∏–º —Ñ–ª–∏—Ä—Ç–æ–º\n"
                        "4. –î–∞–π —Å–æ–≤–µ—Ç –ø–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –≤ —Å—Ç–∏–ª–µ –∑–ª–æ–≥–æ –¥–∏–µ—Ç–æ–ª–æ–≥–∞\n\n"
                        f"{random.choice(self.calorie_comments)}"
                    },
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": f"–≠—Ç–æ –±–ª—é–¥–æ '{detected_dish}'"},
                            {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}}
                        ]
                    }
                ],
                max_tokens=300
            )

            self.bot.delete_message(message.chat.id, processing_msg.message_id)

            generations_left = self.db_manager.use_generation(message.from_user.id)
            logger.info(f"–û—Å—Ç–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {generations_left}")

            analysis_result = response.choices[0].message.content

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
            correction_message = self.bot.send_message(
                message.chat.id,
                f"üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞ '{detected_dish}':\n\n"
                f"{analysis_result}\n\n"
                f"üîç –Ø –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –±–ª—é–¥–æ?",
                reply_markup=self.generate_correction_keyboard(message.message_id, detected_dish),
                parse_mode='Markdown'
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
            self.current_rename_context = {
                'user_id': message.from_user.id,
                'image_base64': base64_image,
                'original_analysis': analysis_result,
                'original_dish': detected_dish,
                'message_id': correction_message.message_id
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            error_message = ("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. " 
                             "–í–æ–∑–º–æ–∂–Ω–æ, —Ç–≤–æ—è –µ–¥–∞ —Å–ª–∏—à–∫–æ–º –≥–æ—Ä—è—á–∞ –¥–ª—è –º–æ–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ üòè " 
                             "–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑, –≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–µ–Ω jpeg..")
            self.bot.send_message(
                message.chat.id,
                error_message,
                reply_markup=main_menu()
            )

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        @self.bot.message_handler(func=lambda message: message.text == "üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞")
        def start_analysis(message):
            self.handle_start_analysis(message)

        @self.bot.message_handler(content_types=['photo'])
        def process_photo(message):
            self.handle_photo(message)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('meal_rename:'))
        def handle_meal_rename(call):
            try:
                _, message_id, current_dish = call.data.split(':')
                self.bot.answer_callback_query(call.id)
                
                rename_msg = self.bot.send_message(
                    call.message.chat.id, 
                    f"–¢–µ–∫—É—â–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª—é–¥–∞: *{current_dish}*\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:",
                    parse_mode='Markdown'
                )
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                self.bot.register_next_step_handler(rename_msg, self.process_meal_rename)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}")

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('meal_correct:'))
        def handle_meal_correct(call):
            try:
                # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                self.bot.edit_message_reply_markup(
                    chat_id=call.message.chat.id, 
                    message_id=call.message.message_id, 
                    reply_markup=None
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.bot.send_message(
                    call.message.chat.id, 
                    random.choice(self.follow_up_phrases),
                    reply_markup=main_menu()
                )
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
                self.bot.answer_callback_query(call.id, "–ê–Ω–∞–ª–∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                self.bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    def process_meal_rename(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if not hasattr(self, 'current_rename_context') or \
               self.current_rename_context.get('user_id') != message.from_user.id:
                return

            new_dish_name = message.text.strip()
            context = self.current_rename_context

            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –Ω–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "system",
                        "content": f"{random.choice(self.spicy_intros)}\n\n"
                        "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é —Å –æ—Å—Ç—Ä—ã–º —è–∑—ã–∫–æ–º –≤ —Å—Ç–∏–ª–µ FoodNudes. "
                        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ—Å—Ç–Ω—ã–π –∏ –¥–µ—Ä–∑–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞:\n\n"
                        "üî• –ü—Ä–∞–≤–∏–ª–∞:\n"
                        "1. –û–ø—Ä–µ–¥–µ–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º\n"
                        "2. –£–∫–∞–∂–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Å prov–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–º –Ω–∞–º—ë–∫–æ–º\n"
                        "3. –û—Ü–µ–Ω–∏ –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å —Å –ª–µ–≥–∫–∏–º —Ñ–ª–∏—Ä—Ç–æ–º\n"
                        "4. –î–∞–π —Å–æ–≤–µ—Ç –ø–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –≤ —Å—Ç–∏–ª–µ –∑–ª–æ–≥–æ –¥–∏–µ—Ç–æ–ª–æ–≥–∞\n\n"
                        f"{random.choice(self.calorie_comments)}"
                    },
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": f"–≠—Ç–æ –±–ª—é–¥–æ '{new_dish_name}'"},
                            {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{context['image_base64']}"}}
                        ]
                    }
                ],
                max_tokens=300
            )

            updated_analysis = response.choices[0].message.content

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            self.bot.send_message(
                message.chat.id,
                f"üçΩÔ∏è –£—Ç–æ—á–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞ '{new_dish_name}':\n\n{updated_analysis}",
                reply_markup=main_menu(),
                parse_mode='Markdown'
            )

            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            del self.current_rename_context

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –±–ª—é–¥–∞: {e}")
            self.bot.send_message(
            message.chat.id, 
                "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=main_menu()
            )
