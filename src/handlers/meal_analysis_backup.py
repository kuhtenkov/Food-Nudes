import os
import logging
from telebot import TeleBot, types
import openai
import base64
from utils.keyboards import main_menu

logger = logging.getLogger(__name__)

class MealAnalysisHandler:
    def __init__(self, bot: TeleBot):
        self.bot = bot
        openai.api_key = os.getenv('OPENAI_API_KEY')  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏

    def encode_image(self, image_data):
        """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64."""
        return base64.b64encode(image_data).decode('utf-8')

    def handle_start_analysis(self, message):
        """–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –±–ª—é–¥–∞."""
        self.bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
            reply_markup=types.ReplyKeyboardRemove()
        )

    def handle_photo(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ."""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ
            file_info = self.bot.get_file(message.photo[-1].file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)

            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            base64_image = self.encode_image(downloaded_file)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–ª—é–¥–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –æ–ø—Ä–µ–¥–µ–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –¥–∞–π —Å–æ–≤–µ—Ç—ã."},
                    {"role": "user", "content": f"–î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –±–ª—é–¥–æ: data:image/jpeg;base64,{base64_image}"}
                ]
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            result = response.choices[0].message.content
            self.bot.send_message(
                message.chat.id,
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:\n{result}",
                reply_markup=main_menu()
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            self.bot.send_message(
                message.chat.id,
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=main_menu()
            )

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        @self.bot.message_handler(func=lambda message: message.text == "üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞")
        def start_analysis(message):
            self.handle_start_analysis(message)

        @self.bot.message_handler(content_types=['photo'])
        def process_photo(message):
            self.handle_photo(message)

